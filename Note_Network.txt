
/******************************************************************************/
SSDP
/******************************************************************************/
「簡式服務探索通訊協定」(Simple Service Discovery Protocol，SSDP) 一如名稱
所示，主要在定義如何在網路上探索網路服務。SSDP 是以 HTTPU 和 HTTPMU 為根據
來定義方法，讓控制點在網路上尋找有興趣的資源，並且讓裝置宣告它們在網路上的
可用性。

SSDP 是以定義搜尋要求和存在宣告的方式，省去只採用其中一種機制所需的費用。
因此，網路上的每一個控制點，既能夠降低網路資料量，又能夠保有完整的網路狀態
資訊。

控制點和裝置都是採用 SSDP。UPnP 控制點在啟動時，會傳送一個 SSDP 搜尋要求
(透過 HTTPMU)，來探索網路上可用的裝置和服務。控制點可以縮小搜尋範圍，只尋找
某種類型的裝置 (如 VCR)、某種類型的服務 (如執行時鐘服務的裝置)，或者甚至是
某一種裝置。

UPnP 裝置會接聽多點傳送連接埠。只要一收到搜尋要求，該裝置便會檢查搜尋條件，
判斷它們是否相符。如果找到一個相符的項目，便會傳送一個單點傳送 SSDP (透過
HTTPU) 回應到控制點。

同樣的，裝置在插入網路之後，也會送出多個 SSDP 存在宣告，告知大家它支援哪些
服務。


以上擷取自http://www.microsoft.com/taiwan/technet/prodtechnol/winxppro/
evaluate/upnpxp.htm


/******************************************************************************/
UDP廣播與多播
/******************************************************************************/
使用UDP協定進行資訊的傳輸之前不需要建議連接。
換句話說就是用戶端向伺服器發送資訊，用戶端只需要給出伺服器的ip地址和連接埠號，然後將資訊封裝到一個待發送的報文中並且發送出去。
至於伺服器端是否存在，或者能否收到該報文，用戶端根本不用管。
通常我們討論的udp的程式都是一對一的單播程式。
本章將討論一對多的服務：廣播（broadcast）、多播（multicast）。
對於廣播，網路中的所有主機都會接收一份數據副本。
對於多播，消息只是發送到一個多播地址，網路知識將數據分發給哪些表示想要接收發送到該多播地址的數據的主機。總得來說，只有UDP套接字允許廣播或多播。

UDP廣播
廣播UDP與單播UDP的區別就是IP地址不同，廣播使用廣播地址255.255.255.255，將消息發送到在同一廣播網路上的每個主機。
值得強調的是：本地廣播資訊是不會被路由器轉發。當然這是十分容易理解的，因為如果路由器轉發了廣播資訊，那麼勢必會引起網路癱瘓。
這也是為什麼IP協定的設計者故意沒有定義互聯網範圍的廣播機制。
廣播地址通常用於在網路遊戲中處於同一本地網路的玩家之間交流狀態資訊等。廣播就不在寫演示程式了，讀者可以將ECHO程式的ip地址改為廣播地址即可。
其實廣播顧名思義，就是想局域網內所有的人說話，但是廣播還是要指明接收者的連接埠號的，因為不可能接受者的所有連接埠都來收聽廣播。

UDP多播
同樣的UDP多播也要指明接受者的連接埠號，而且與廣播相似的是多播與單播之間的區別還在於地址。
ipv4中的多播地址範圍是：224.0.0.0到239.255.255.255。
在JAVA中，多播一樣十分好實現，要實現多播，就要用到MulticastSocket類，其實該類就是DatagramSocket的子類，在使用時除了多播自己的一些特性外，
把它當做DatagramSocket類使用就可以了。
 
下面將給出一個簡單的多播接受數據的例子：
Java代碼
package cn.edu.heut.zcl.multicast;  
  
import java.net.DatagramPacket;  
import java.net.InetAddress;  
import java.net.MulticastSocket;  
  
public class UDPMulticastServer {  
         final static int RECEIVE_LENGTH = 1024;  
         static String multicastHost="224.0.0.1";  
         static int localPort = 9998;  
         public static void main(String[] args) throws Exception {  
  
                   InetAddress receiveAddress =InetAddress.getByName(multicastHost);  
                   if(!receiveAddress.isMulticastAddress()){ //測試是否為多播地址  
                            throw new Exception("請使用多播地址");  
                   }  
  
                   int port = localPort;  
                   MulticastSocket receiveMulticast = new MulticastSocket(port);  
                   receiveMulticast.joinGroup(receiveAddress);  
                   DatagramPacket dp = new DatagramPacket(new byte[RECEIVE_LENGTH], RECEIVE_LENGTH);  
                   receiveMulticast.receive(dp);  
                   System.out.println(new String(dp.getData()).trim());  
                   receiveMulticast.close();  
         }  
}  
 
接下來實現多播發送方的代碼：
Java代碼
package cn.edu.heut.zcl.multicast;  
  
import java.net.DatagramPacket;  
import java.net.InetAddress;  
import java.net.MulticastSocket;  
  
public class UDPMulticastClient {  
                   static String destAddressStr = "224.0.0.1";  
                   static int destPortInt = 9998;  
                   static int TTLTime = 4;  
         public static void main(String[] args) throws Exception {  
  
                   InetAddress destAddress = InetAddress.getByName(destAddressStr);  
                   if(!destAddress.isMulticastAddress()){//檢測該地址是否是多播地址  
                            throw new Exception("地址不是多播地址");  
                   }  

                   int destPort = destPortInt;  
                   int TTL = TTLTime;  
                   MulticastSocket multiSocket =new MulticastSocket();  
                   multiSocket.setTimeToLive(TTL);  
                   byte[] sendMSG = "11#msg".getBytes();  
                   DatagramPacket dp = new DatagramPacket(sendMSG, sendMSG.length, destAddress  , destPort);  
                   multiSocket.send(dp);  
                   multiSocket.close();  
         }  
}  
 
在多播中設置了TTl值（Time to live），每一個ip數據報文中都包含一個TTL，每當有路由器轉發該報文時，TTL減1，知道減為0時，生命週期結束，報文即時沒有到達目的地
，也立即宣佈死亡。當然在Java中，ttl並不是十分準確的，曾經在一本書中介紹過報文的傳播距離是不會超過ttl所設置的值的。
 

/******************************************************************************/
UDP初步
/******************************************************************************/
使用UDP協定進行資訊的傳輸之前不需要建議連接。
換句話說就是用戶端向伺服器發送資訊，用戶端只需要給出伺服器的ip地址和連接埠號，然後將資訊封裝到一個待發送的報文中並且發送出去。
至於伺服器端是否存在，或者能否收到該報文，用戶端根本不用管。
明白了上一段的內容對使用udp協定進行編程十分有用。
在最開始學java時，我總是追求別寫速度快，想像自己能構想電影裡的駭客一樣，在電腦面前快速敲擊鍵盤，然後很快就能寫出超讚的程式。
所以盲目的追求API的使用熟練，忘記了語言的精髓不是語法的純熟，而在於真正有價值的是你要說什麼。說什麼有意義，有深度，只有明白了這樣，才能繼續往深處走。
以為的追求api的使用沒有絲毫的價值。

簡單UDP連接
從最簡單的內容開始，首先要建立一個簡單的udp連接，大致要實現的內容如下：
首先編寫伺服器端，伺服器監聽一個連接埠，然後一直阻塞等待用戶端發來的消息。
用戶端向伺服器端的這個連接埠發送一個數據報，此時伺服器端將接受的該數據報，然後列印出來。
首先實現伺服器端，對於伺服器端，他不需要知道是誰發送給他的數據就能接受到數據報。
但是伺服器端必須要制定一個連接埠，不然用戶端將不知道發送到伺服器端的那個連接埠。
代碼如下：
Java代碼
package cn.edu.zcl.udp.unicast;  

import java.io.IOException;  
import java.net.DatagramPacket;  
import java.net.DatagramSocket;  
import java.net.SocketException;  
   
public class UDPUnicastServer {  
         /** 
          * @param args 
          * @throws SocketException 
          */  
         public static void main(String[] args) throws SocketException {  
                   DatagramSocket clientDSocket ;  
                   DatagramPacket receiveDP = new DatagramPacket(new byte[1024], 1024);  
                   clientDSocket = new DatagramSocket(9998);  
                   try {  
                            clientDSocket.receive(receiveDP);  
                            System.out.println(receiveDP.getAddress()+"   "+receiveDP.getPort());  
                   } catch (IOException e) {  
                            e.printStackTrace();  
                   }  
         }  
}  

接下來是用戶端，用戶端首先需要知道伺服器端的ip地址和連接埠號，然後把要發送的資訊連同數據報一起封裝，這樣用戶端才知道把數據報發送到哪個地方。
之後通過DatagramSocket的send方法就可以將封裝好的數據報發送出去。具體代碼如下：  
package cn.edu.zcl.udp.unicast;  
   
import java.io.IOException;  
import java.net.DatagramPacket;  
import java.net.DatagramSocket;  
import java.net.InetAddress;  
import java.net.SocketException;  
   
public class UDPUnicastClient {  
   
         /** 
          * @param args 
          * @throws SocketException 
          */  
         public static void main(String[] args) throws Exception {  
                   DatagramSocket clientDSocket ;  
                   DatagramPacket sendDP =  
                            new DatagramPacket(new byte[1024], 1024,InetAddress.getByName("localhost"),9998);  
                   clientDSocket = new DatagramSocket(9199);  
                   try {  
                            clientDSocket.send(sendDP);  
                   } catch (IOException e) {  
                            e.printStackTrace();  
                   }  
         }  
}  
 
以上是最簡單的udp通訊的一個模型，代碼可以在代碼包中找到。接下來將介紹如何將數據封裝在數據報中發送出去。
接下來的代碼只是對上面的代碼進行簡單的修改：
udp協定傳輸的是byte數組，所以對於字串，只要將字串資訊轉換成byte數組就可以了，執行String類的getBytes()方法就可實現以上操作。
而在伺服器端只要通過數據包的getData（）方法就可以接收到該byte數組。這部分代碼的改動不大，讀者可以參考UDPUnicastSendDataClient與UDPUnicastSendDataServer代碼。
 
UDP不同類型數據的傳輸
問題接種而來，字串的類中提供了轉換成byte數組的方法，但是對於int型、float型、double….應該如何操作呢？
對對於這部分知識，如果對電腦組成原理等相關課程學得好的同學，應該是小菜一碟。
byte(位元組)是8用8bit(二進位位)來表示的，而整數類型是由32bit來表示。
如果要用byte來表示int的話，就需要4個byte才可以。
我是這樣設計的，首先在byte[0]中，存儲int的最低八位，然後byte[1]中存儲int的次低八位，依次類推，這樣就可以將int存儲在byte中了。
當讀取時採用相反操作就ok了。以下是代碼。
Java代碼
package cn.edu.zcl.util.bytearray;  
   
import java.io.IOException;  
/** 
 * 該類實現不同數據類型與byte數組之間的轉換 
 * @author Legend 
 * 
 */  
public class ByteArrayUtil {  
          
         /** 
          * 將指定的int數組轉換為byte[]數組 
          * @param i 指定待轉換的int類型變數 
          * @return 返回轉換後的byte數組 
          * @throws IOException 
          */  
         public static byte[] toByteArrayFromInt(int i) throws IOException {  
                   byte[] b= new byte[4];  
                   b[0] = (byte)i;  
                   b[1] = (byte)(i>>8);  
                   b[2] = (byte)(i>>16);  
                   b[3] = (byte)(i>>24);  
                   return b ;  
         }  
         /** 
          * 將指定的byte位元組數組轉換成int類型數據 
          * @param byteArray 待轉換數組 
          * @return 轉換後的 
          * @throws IOException 
          */  
         public static int toIntFromByteArray(byte[] byteArray) throws IOException {  
                   int result = 0;  
                   result = (int)(byteArray[0]|byteArray[1]<< 8 | byteArray[2] << 16 | byteArray[3] << 24);  
                   return  result;  
          
         }  
         public static void main(String[] args) throws IOException{  
                   byte[] b =toByteArrayFromInt(22);  
                   int i = toIntFromByteArray(b);  
                   System.out.println(i);  
                    
         }  
}
 
 
對於以上代碼在文件ByteArrayUtil.java中。
對於其他類型轉換，暫時先不在做講解，讀者可以自行百度，如果後有時間，我會將這部分的內容補充完整。
剛開始沒有注意，博文寫完之後才發現，所有的類中的沒有添加套接字關閉的動作，不過源代碼已將上次，就不在修改了。
 

/******************************************************************************/
網路壓力測試工具Iperf
/******************************************************************************/
這個工具就是Iperf，可以在這個地方下載:
http://www.noc.ucf.edu/Tools/Iperf/iperf.exe

使用方式:
這於這個工具是Server Client架構，所以需要在兩台電腦上測試，中間經過什麼東西，
就是想測試效能的設備，比如Firewall,VPN,SSL- VPN,Wireless AP...，所以先找兩台電腦，
一台當Server，一台當Client:
Step.1 下載: 到http://www.noc.ucf.edu/Tools/Iperf/iperf.exe 將程式下載，之後將程式copy到想存放的地方，比如說D:/之下。
Step.2 開啟dos視窗: 執行->cmd
Step.3 執行Server: 從comandline輸入 D:/iperf.exe -s (其它參數)
Step.4 執行Client: 從comandline輸入 D:/iperf.exe -c serverip (其它參數)

參數參考:
Client端/Server端 都可用的參數:
-f, --format [kmKM] 以什麼方式顯示: Kbits, Mbits, KBytes, MBytes
-i, --interval # 每隔多少秒顯更新頻寬資訊
-l, --len #[KM] 設定讀寫的緩衝區長度 (預設 8 KB)
-m, --print_mss 顯示TCP/IP標頭的MTU(最大segment)大小
-o, --output 將report或錯誤訊息輸出到這個檔案裡
-p, --port # 設定server與client的溝通port
-u, --udp 使用UDP代替TCP測試
-w, --window #[KM] TCP的window大小(socket buffer size)
-B, --bind bind某,結合某介面或multicast的位址用
-C, --compatibility 與舊版本比較用，不送任何封包
-M, --mss # 設定TCP最大segment大小 (MTU - 40 bytes)
-N, --nodelay 設定無TCP延遲，取消Nagle's演算法
-V, --IPv6Version 設定為IPv6格式

Server 端參數:
-s, --server 執行Server模式
-D, --daemon 執行Server背景模式
-R, --remove 移除服務

Client 端參數:
-b, --bandwidth #[KM] UDP參數，以bits/sec傳送(預設 1 Mbit/sec, implies -u)
-c, --client 執行Client模式，並連線到Server的IP:
-d, --dualtest 同時執行雙向的模擬測試
-n, --num #[KM] 傳輸多少bytes封包 (取代-t)
-r, --tradeoff 單獨執行雙向的模擬測試
-t, --time # 每隔幾秒傳輸一次 (預設10 秒)
-F, --fileinput 選取某檔案傳輸測試
-I, --stdin 將鍵盤輸入的資料進行傳輸測試
-L, --listenport # 進行雙測試時，接收回應的port
-P, --parallel # 同時執行多少個Client連線
-T, --ttl # 進行Multicat的time-to-live(預設為 1)

其它參數:
-h, --help 顯示help 資訊
-v, --version 顯示版本

範例:
1. Server端:
    iperf -s -u -i 1 -l 1024 -p 5001
設置Server只接收UDP封包，每隔1秒更新顯示一次，進行讀寫的緩衝區大小為1020k，進行監聽的port為5001

2.Client端:
    iperf -c 192.168.4.88 -u -i 1 -l 1024 -p 5001 -t 200 -b 1m
設置 Client端，連向ServerIP為192.168.4.88，以UDP傳送，每隔1秒更新顯示一次，進行寫的緩衝區大小為1020k，從 5001port丟封包出去，每隔200秒丟一次1M的封包


/******************************************************************************/
網路效能與壓力測試工具-IPERF
/******************************************************************************/
但是如果今天是針對無線網路或是區域網路的話,就必須採用測試工具
其中IPERF屬於其中簡單而易用的一種,DOS命令列模式,架設方便
他另外有一種JPERF,是用java編寫的window視窗版本
IPERF的使用方式簡單,這邊使用IPERF 1.70版本分項列出常用參數如下:

※如何執行
IPERF的使用相當簡單,首先你必須準備兩台電腦(PC1,PC2)
其中一台設定為Server,一台設定為Client即可
PC1:IPERF Server (10.10.10.1)
PC2:IPERF Client (192.168.1.2)

待測試物: 某廠牌分享器
┌───┐                                  ┌───┐
  PC2     -----LAN--- 待測試物 ----WAN----    PC1
└───┘                                  └───┘

PC1啟動方式:
iperf -s

PC2啟動方式: 
iperf -c PC1的IP

example:
iperf -c 10.10.10.1

※如何變更tcp或是udp型態
iperf 的預設協定是tcp,如果要變更為udp,請下參數 -u
example:
iperf -c 10.10.10.1 -u

但是-u的預設值流量是1Mbit/s,如要提高請使用-b
example: 100Mbit/s
iperf -c 10.10.10.1 -u -b 1024000000

※如何增加IPERF connection數
TCP protocol有定義window size
這個東西形同網路封包的多工作業,如果同時間只處理一個封包串流,有可能無法享用所有頻寬
因此我們可以透過增加tcp的connection,來讓iperf搾出最多的效能
這個值受PC等級與待側物的性能影響,需要反覆測試才知道最佳數據會落在幾個session
參數為-P
example: 5個IPERF connection
iperf -c 10.10.10.1 -P 5
※如何設定測試時間
IPERF其實不是一個很穩定的測試工具,數據常有起落,建議測試時間至少要30秒
參數: -t
example: 30秒
iperf -c 10.10.10.1 -t 30
※如何讓他批次執行
IPERF這個工具除了數據不太穩定,長時間運行也可能自己就突然crash

改善的方式就是用批次檔,簡易的DOS 批次檔迴圈寫法如下:
example: client
:loop
iperf -c 10.10.10.1
goto loop
example: server
:loop
iperf -s
goto loop


/******************************************************************************/
[轉貼]如何正確使用Windows的Ping指令
/******************************************************************************/
對於Windows下ping指令相信大家已經再熟悉不過了，但是能把ping的功能發揮到最大的人卻並不是很多，當然我也並不是說我可以讓ping發揮最大的功能，我也只不過經常用ping這個工具，也總結了一些小經驗，現在和大家分享一下。 
現在我就參照ping指令的說明說明來給大家說說我使用ping時會用到的技巧，ping只有在安裝了TCP/IP協定以後才可以使用： 
ping [-t] [-a] [-n count] [-l length] [-f] [-i ttl] [-v tos] [-r count] [-s count] [[-j computer-list] | [-k computer-list]] [-w timeout] destination-list

Options:
-t Ping the specified host until stopped.To see statistics and continue - type Control-Break;To stop - type Control-C.
不停的ping地方主機，直到你按下Control-C。
此功能沒有什麼特別的技巧，不過可以配合其他參數使用，將在下面提到。

-a Resolve addresses to hostnames.
解析電腦NetBios名。
範例：C:＼>ping -a 192.168.1.21
Pinging iceblood.yofor.com [192.168.1.21] with 32 bytes of data:
Reply from 192.168.1.21: bytes=32 time<10ms TTL=254
Reply from 192.168.1.21: bytes=32 time<10ms TTL=254
Reply from 192.168.1.21: bytes=32 time<10ms TTL=254
Reply from 192.168.1.21: bytes=32 time<10ms TTL=254
Ping statistics for 192.168.1.21:
Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),Approximate round trip times in milli-seconds:
Minimum = 0ms, Maximum = 0ms, Average = 0ms
從上面就可以知道IP為192.168.1.21的電腦NetBios名為iceblood.yofor.com。

-n count Number of echo requests to send.
發送count指定的Echo封包數。
在預設情況下，一般都只發送四個封包，透過這個指令可以自己定義發送的個數，對衡量網路速度很有說明，比如我想測試發送50個封包的返回的平均時間為多少，最快時間為多少，最慢時間為多少就可以透過以下獲知：
C:＼>ping -n 50 202.103.96.68
Pinging 202.103.96.68 with 32 bytes of data:
Reply from 202.103.96.68: bytes=32 time=50ms TTL=241
Reply from 202.103.96.68: bytes=32 time=50ms TTL=241
Reply from 202.103.96.68: bytes=32 time=50ms TTL=241
Request timed out.
………………
Reply from 202.103.96.68: bytes=32 time=50ms TTL=241
Reply from 202.103.96.68: bytes=32 time=50ms TTL=241
Ping statistics for 202.103.96.68:
Packets: Sent = 50, Received = 48, Lost = 2 (4% loss),Approximate round trip times in milli-seconds:
Minimum = 40ms, Maximum = 51ms, Average = 46ms
從以上我就可以知道在給202.103.96.68發送50個封包的過程當中，返回了48個，其中有兩個由於未知原因丟失，這48個封包當中返回速度最快為40ms，最慢為51ms，平均速度為46ms。

-l size Send buffer size.
定義echo封包大小。
在預設的情況下windows的ping發送的封包大小為32byt，我們也可以自己定義它的大小，但有一個大小的限制，就是最大只能發送65500byt，也許有人會問為什麼要限制到65500byt，因為Windows系列的系統都有一個安全漏洞(也許還包括其他系統)就是當向對方一次發送的封包大於或等於65532時，對方就很有可能擋機，所以微軟公司為瞭解決這一安全漏洞於是限制了ping的封包大小。雖然微軟公司已經做了此限制，但這個參數配合其他參數以後危害依然非常強大，比如我們就可以透過配合-t參數來實現一個帶有攻擊性的指令：(以下介紹帶有危險性，僅用於試驗，請勿輕易施於別人機器上，否則後果自負)
C:＼>ping -l 65500 -t 192.168.1.21
Pinging 192.168.1.21 with 65500 bytes of data:
Reply from 192.168.1.21: bytes=65500 time<10ms TTL=254
Reply from 192.168.1.21: bytes=65500 time<10ms TTL=254
………………
face=Verdana>
這樣它就會不停的向192.168.1.21電腦發送大小為65500byt的封包，如果你只有一臺電腦也許沒有什麼效果，但如果有很多電腦那麼就可以使對方完全癱瘓，我曾經就做過這樣的試驗，當我同時使用10臺以上電腦ping一臺Win2000Pro系統的電腦時，不到5分鐘對方的網路就已經完全癱瘓，網路嚴重堵塞，HTTP和FTP服務完全停止，由此可見威力非同小可。

-f Set Don't Fragment flag in packet.
在封包中發送「不要分段」標誌。
在一般你所發送的封包都會透過路由分段再發送給對方，加上此參數以後路由就不會再分段處理。

-i TTL Time To Live.
指定TTL值在對方的系統裡停留的時間。
此參數同樣是說明你檢查網路運轉情況的。

-v TOS Type Of Service.
將「服務類型」欄位設定為 tos 指定的值。

-r count Record route for count hops.
在「記錄路由」欄位中記錄傳出和返回封包的路由。
在一般情況下你發送的封包是透過一個個路由才到達對方的，但到底是經過了哪些路由呢？透過此參數就可以設定你想探測經過的路由的個數，不過限制在了9個，也就是說你只能跟蹤到9個路由，如果想探測更多，可以透過其他指令實現，我將在以後的文章中給大家講解。以下為範例：
C:＼>ping -n 1 -r 9 202.96.105.101 (發送一個封包，最多記錄9個路由)
Pinging 202.96.105.101 with 32 bytes of data:
Reply from 202.96.105.101: bytes=32 time=10ms TTL=249
Route: 202.107.208.187 ->
202.107.210.214 ->
61.153.112.70 ->
61.153.112.89 ->
202.96.105.149 ->
202.96.105.97 ->
202.96.105.101 ->
202.96.105.150 ->
61.153.112.90
Ping statistics for 202.96.105.101:
Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
Minimum = 10ms, Maximum = 10ms, Average = 10ms
從上面我就可以知道從我的電腦到202.96.105.101一共透過了202.107.208.187 ，202.107.210.214 , 61.153.112.70 , 61.153.112.89 , 202.96.105.149 , 202.96.105.97這幾個路由。
-s count Timestamp for count hops.
指定 count 指定的躍點數的時間戳。
此參數和-r差不多，只是這個參數不記錄封包返回所經過的路由，最多也只記錄4個。
-j host-list Loose source route along host-list.
利用 computer-list 指定的電腦清單路由封包。連續電腦可以被中間閘道器分隔(路由稀疏源)IP 允許的最大數量為 9。
-k host-list Strict source route along host-list.
利用 computer-list 指定的電腦清單路由封包。連續電腦不能被中間閘道器分隔(路由嚴格源)IP 允許的最大數量為 9。
-w timeout Timeout in milliseconds to wait for each reply.
指定逾時間隔，單位為毫秒。
此參數沒有什麼其他技巧。
ping指令的其他技巧：在一般情況下還可以透過ping對方讓對方返回給你的TTL值大小，粗略的判斷目的主機的系統類型是Windows系列還是UNIX/Linux系列，一般情況下Windows系列的系統返回的TTL值在100-130之間，而UNIX/Linux系列的系統返回的TTL值在240-255之間，當然TTL的值在對方的主機裡是可以修改的，Windows系列的系統可以透過修改登錄以下鍵值實現：
[HKEY_LOCAL_MACHINE＼SYSTEM＼CurrentControlSet＼Services＼Tcpip＼Parameters]
"DefaultTTL"=dword:000000ff
255---FF
128---80
64----40
32----20


/******************************************************************************/
linux curl 命令詳解，以及實例
/******************************************************************************/
linux curl是一個利用URL規則在命令行下工作的文件傳輸工具。它支援文件的上傳和下載，所以是綜合傳輸工具，但按傳統，習慣稱url為下載工具。
一，curl命令參數，有好多我沒有用過，也不知道翻譯的對不對，如果有誤的地方，還請指正。
查看複製列印?
-a/--append 上傳文件時，附加到目標文件  
 -A/--user-agent <string>  設置用戶代理發送給伺服器  
 - anyauth   可以使用「任何」身份驗證方法  
 -b/--cookie <name=string/file> cookie字串或文件讀取位置  
 - basic 使用HTTP基本驗證  
 -B/--use-ascii 使用ASCII /文本傳輸  
 -c/--cookie-jar <file> 操作結束後把cookie寫入到這個文件中  
 -C/--continue-at <offset>  斷點續轉  
 -d/--data <data>   HTTP POST方式傳送數據  
 --data-ascii <data>  以ascii的方式post數據  
 --data-binary <data> 以二進位的方式post數據  
 --negotiate     使用HTTP身份驗證  
 --digest        使用數字身份驗證  
 --disable-eprt  禁止使用EPRT或LPRT  
 --disable-epsv  禁止使用EPSV  
 -D/--dump-header <file> 把header資訊寫入到該文件中  
 --egd-file <file> 為隨機數據(SSL)設置EGD socket路徑  
 --tcp-nodelay   使用TCP_NODELAY選項  
 -e/--referer 來源網址  
 -E/--cert <cert[:passwd]> 用戶端證書文件和密碼 (SSL)  
 --cert-type <type> 證書文件類型 (DER/PEM/ENG) (SSL)  
 --key <key>     私鑰文件名 (SSL)  
 --key-type <type> 私鑰文件類型 (DER/PEM/ENG) (SSL)  
 --pass  <pass>  私鑰密碼 (SSL)  
 --engine <eng>  加密引擎使用 (SSL). "--engine list" for list  
 --cacert <file> CA證書 (SSL)  
 --capath <directory> CA目錄 (made using c_rehash) to verify peer against (SSL)  
 --ciphers <list>  SSL密碼  
 --compressed    要求返回是壓縮的形勢 (using deflate or gzip)  
 --connect-timeout <seconds> 設置最大請求時間  
 --create-dirs   建立本地目錄的目錄層次結構  
 --crlf          上傳是把LF轉變成CRLF  
 -f/--fail          連接失敗時不顯示http錯誤  
 --ftp-create-dirs 如果遠端目錄不存在，創建遠端目錄  
 --ftp-method [multicwd/nocwd/singlecwd] 控制CWD的使用  
 --ftp-pasv      使用 PASV/EPSV 代替連接埠  
 --ftp-skip-pasv-ip 使用PASV的時候,忽略該IP地址  
 --ftp-ssl       嘗試用 SSL/TLS 來進行ftp數據傳輸  
 --ftp-ssl-reqd  要求用 SSL/TLS 來進行ftp數據傳輸  
 -F/--form <name=content> 模擬http表單提交數據  
 -form-string <name=string> 模擬http表單提交數據  
 -g/--globoff 禁用網址序列和範圍使用{}和[]  
 -G/--get 以get的方式來發送數據  
 -h/--help 幫助  
 -H/--header <line>自定義頭資訊傳遞給伺服器  
 --ignore-content-length  忽略的HTTP頭資訊的長度  
 -i/--include 輸出時包括protocol頭資訊  
 -I/--head  只顯示文檔資訊  
 從文件中讀取-j/--junk-session-cookies忽略會話Cookie  
 - 界面<interface>指定網路介面/地址使用  
 - krb4 <級別>啟用與指定的安全級別krb4  
 -j/--junk-session-cookies 讀取文件進忽略session cookie  
 --interface <interface> 使用指定網路介面/地址  
 --krb4 <level>  使用指定安全級別的krb4  
 -k/--insecure 允許不使用證書到SSL站台  
 -K/--config  指定的配置文件讀取  
 -l/--list-only 列出ftp目錄下的文件名稱  
 --limit-rate <rate> 設置傳輸速度  
 --local-port<NUM> 強制使用本地連接埠號  
 -m/--max-time <seconds> 設置最大傳輸時間  
 --max-redirs <num> 設置最大讀取的目錄數  
 --max-filesize <bytes> 設置最大下載的文件總量  
 -M/--manual  顯示全手動  
 -n/--netrc 從netrc文件中讀取用戶名和密碼  
 --netrc-optional 使用 .netrc 或者 URL來覆蓋-n  
 --ntlm          使用 HTTP NTLM 身份驗證  
 -N/--no-buffer 禁用緩衝輸出  
 -o/--output 把輸出寫到該文件中  
 -O/--remote-name 把輸出寫到該文件中，保留遠端文件的文件名  
 -p/--proxytunnel   使用HTTP代理  
 --proxy-anyauth 選擇任一代理身份驗證方法  
 --proxy-basic   在代理上使用基本身份驗證  
 --proxy-digest  在代理上使用數字身份驗證  
 --proxy-ntlm    在代理上使用ntlm身份驗證  
 -P/--ftp-port <address> 使用連接埠地址，而不是使用PASV  
 -Q/--quote <cmd>文件傳輸前，發送命令到伺服器  
 -r/--range <range>檢索來自HTTP/1.1或FTP伺服器位元組範圍  
 --range-file 讀取（SSL）的隨機文件  
 -R/--remote-time   在本地生成文件時，保留遠端文件時間  
 --retry <num>   傳輸出現問題時，重試的次數  
 --retry-delay <seconds>  傳輸出現問題時，設置重試間隔時間  
 --retry-max-time <seconds> 傳輸出現問題時，設置最大重試時間  
 -s/--silent靜音模式。不輸出任何東西  
 -S/--show-error   顯示錯誤  
 --socks4 <host[:port]> 用socks4代理給定主機和連接埠  
 --socks5 <host[:port]> 用socks5代理給定主機和連接埠  
 --stderr <file>  
 -t/--telnet-option <OPT=val> Telnet選項設置  
 --trace <file>  對指定文件進行debug  
 --trace-ascii <file> Like --跟蹤但沒有hex輸出  
 --trace-time    跟蹤/詳細輸出時，添加時間戳  
 -T/--upload-file <file> 上傳文件  
 --url <URL>     Spet URL to work with  
 -u/--user <user[:password]>設置伺服器的用戶和密碼  
 -U/--proxy-user <user[:password]>設置代理用戶名和密碼  
 -v/--verbose  
 -V/--version 顯示版本資訊  
 -w/--write-out [format]什麼輸出完成後  
 -x/--proxy <host[:port]>在給定的連接埠上使用HTTP代理  
 -X/--request <command>指定什麼命令  
 -y/--speed-time 放棄限速所要的時間。默認為30  
 -Y/--speed-limit 停止傳輸速度的限制，速度時間'秒  
 -z/--time-cond  傳送時間設置  
 -0/--http1.0  使用HTTP 1.0  
 -1/--tlsv1  使用TLSv1（SSL）  
 -2/--sslv2 使用SSLv2的（SSL）  
 -3/--sslv3         使用的SSLv3（SSL）  
 --3p-quote      like -Q for the source URL for 3rd party transfer  
 --3p-url        使用url，進行第三方傳送  
 --3p-user       使用用戶名和密碼，進行第三方傳送  
 -4/--ipv4   使用IP4  
 -6/--ipv6   使用IP6  
 -#/--progress-bar 用進度條顯示當前的傳送狀態  
二，常用curl實例
1，抓取頁面內容到一個文件中
查看複製列印?
[root@krlcgcms01 mytest]# curl -o home.html  http://blog.51yip.com  
2，用-O（大寫的），後面的url要具體到某個文件，不然抓不下來。我們還可以用正則來抓取東西
查看複製列印?
[root@krlcgcms01 mytest]# curl -O http://blog.51yip.com/wp-content/uploads/2010/09/compare_varnish.jpg  
[root@krlcgcms01 mytest]# curl -O http://blog.51yip.com/wp-content/uploads/2010/[0-9][0-9]/aaaaa.jpg  
3，模擬表單資訊，模擬登錄，保存cookie資訊
查看複製列印?
[root@krlcgcms01 mytest]# curl -c ./cookie_c.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  
4，模擬表單資訊，模擬登錄，保存頭資訊
查看複製列印?
[root@krlcgcms01 mytest]# curl -D ./cookie_D.txt -F log=aaaa -F pwd=****** http://blog.51yip.com/wp-login.php  
-c(小寫)產生的cookie和-D裡面的cookie是不一樣的。
5，使用cookie文件
查看複製列印?
[root@krlcgcms01 mytest]# curl -b ./cookie_c.txt  http://blog.51yip.com/wp-admin  
6，斷點續傳，-C(大寫的)
查看複製列印?
[root@krlcgcms01 mytest]# curl -C -O http://blog.51yip.com/wp-content/uploads/2010/09/compare_varnish.jpg  
7，傳送數據,最好用登錄頁面測試，因為你傳值過去後，curl回抓數據，你可以看到你傳值有沒有成功
查看複製列印?
[root@krlcgcms01 mytest]# curl -d log=aaaa  http://blog.51yip.com/wp-login.php  
8，顯示抓取錯誤，下面這個例子，很清楚的表明了。
查看複製列印?
[root@krlcgcms01 mytest]# curl -f http://blog.51yip.com/asdf  
curl: (22) The requested URL returned error: 404  
[root@krlcgcms01 mytest]# curl http://blog.51yip.com/asdf  
  
<HTML><HEAD><TITLE>404,not found</TITLE>  
。。。。。。。。。。。。  
9，偽造來源地址，有的網站會判斷，請求來源地址。
查看複製列印?
[root@krlcgcms01 mytest]# curl -e http://localhost http://blog.51yip.com/wp-login.php  
10，當我們經常用curl去搞人家東西的時候，人家會把你的IP給屏蔽掉的,這個時候,我們可以用代理
查看複製列印?
[root@krlcgcms01 mytest]# curl -x 24.10.28.84:32779 -o home.html http://blog.51yip.com  
11，比較大的東西，我們可以分段下載
查看複製列印?
[root@krlcgcms01 mytest]# curl -r 0-100 -o img.part1 http://blog.51yip.com/wp-  
  
content/uploads/2010/09/compare_varnish.jpg  
 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current  
 Dload  Upload   Total   Spent    Left  Speed  
100   101  100   101    0     0    105      0 --:--:-- --:--:-- --:--:--     0  
[root@krlcgcms01 mytest]# curl -r 100-200 -o img.part2 http://blog.51yip.com/wp-  
  
content/uploads/2010/09/compare_varnish.jpg  
 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current  
 Dload  Upload   Total   Spent    Left  Speed  
100   101  100   101    0     0     57      0  0:00:01  0:00:01 --:--:--     0  
[root@krlcgcms01 mytest]# curl -r 200- -o img.part3 http://blog.51yip.com/wp-  
  
content/uploads/2010/09/compare_varnish.jpg  
 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current  
 Dload  Upload   Total   Spent    Left  Speed  
100  104k  100  104k    0     0  52793      0  0:00:02  0:00:02 --:--:-- 88961  
[root@krlcgcms01 mytest]# ls |grep part | xargs du -sh  
4.0K    one.part1  
112K    three.part3  
4.0K    two.part2  
用的時候，把他們cat一下就OK了,cat img.part* >img.jpg
12，不會顯示下載進度資訊
查看複製列印?
[root@krlcgcms01 mytest]# curl -s -o aaa.jpg  http://blog.51yip.com/wp-content/uploads/2010/09/compare_varnish.jpg  
13，顯示下載進度條
查看複製列印?
[root@krlcgcms01 mytest]# curl -# -O  http://blog.51yip.com/wp-content/uploads/2010/09/compare_varnish.jpg  
######################################################################## 100.0%  
14,通過ftp下載文件
查看複製列印?
[zhangy@BlackGhost ~]$ curl -u 用戶名:密碼 -O http://blog.51yip.com/demo/curtain/bbstudy_files/style.css  
 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current  
 Dload  Upload   Total   Spent    Left  Speed  
101  1934  101  1934    0     0   3184      0 --:--:-- --:--:-- --:--:--  7136  
或者用下面的方式
查看複製列印?
[zhangy@BlackGhost ~]$ curl -O ftp://用戶名:密碼@ip:port/demo/curtain/bbstudy_files/style.css  
15，通過ftp上傳
查看複製列印?
[zhangy@BlackGhost ~]$ curl -T test.sql ftp://用戶名:密碼@ip:port/demo/curtain/bbstudy_files/  
6

/******************************************************************************/
/******************************************************************************/
curl 指令用法   from : http://evelynnote.blogspot.tw/2011/03/curl.html
轉錄整理自: Linux curl使用简单介绍

curl 是 Linux 下一個很強大的 http 命令列工具
1) 取得網頁內容，螢幕輸出
$ curl http://www.linuxidc.com

2) -o: 取得網頁內容，檔案輸出
$ curl -o page.html http://www.linuxidc.com

3) -x: 指定 http 使用的 proxy 
$ curl -x 123.45.67.89:1080 -o page.html http://www.linuxidc.com

4) -D: 把 http response 裡面的 cookie 資訊另存新檔
$ curl -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.linuxidc.com

5）-b: 把 cookie 資訊加到 http request 裡
$ curl -x 123.45.67.89:1080 -o page1.html -D cookie0002.txt -b cookie0001.txt http://www.linuxidc.com

6）-A: 設定瀏覽器資訊
#Windows 2000上的 IE6.0
$ curl -A "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.linuxidc.com
# Linux Netscape 4.73
$ curl -A "Mozilla/4.73 [en] (X11; U; Linux 2.2; 15 i686" -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.linuxidc.com

7）-e: 設定 referrer
另外一個伺服器端常用的限制方法，就是檢查 http 訪問的 referer。比如你先訪問首頁，再訪問裡面所指定的下載頁，這第二次訪問的 referer 位址就是第一次訪問成功後的頁面位址。這樣，伺服器端只要發現對下載頁面某次訪問的 referer 位址不是首頁的位址，就可以斷定那是個盜連了
$ curl -A "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)" -x 123.45.67.89:1080 -e "mail.linuxidc.com" -o page.html -D cookie0001.txt http://www.linuxidc.com

8）-O: 使用伺服器上的檔案名，存在本地 
$ curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG

9）可使用 Regular Expression 抓取所有 match 的檔案，指定 match 的群組內容為新檔名
$ curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen[1-10].JPG
$ curl -o #2-#1.jpg http://cgi2.tky.3web.ne.jp/~{zzh,nick}/[001-201].JPG
原來： ~zzh/001.JPG -> 下載後：001-zzh.JPG 
原來： ~nick/001.JPG -> 下載後：001-nick.JPG

10）-c: 續傳 (只能用在原本是 curl 傳輸的檔案)
$ curl -c -O http://cgi2.tky.3wb.ne.jp/~zzh/screen1.JPG

11) -r: 分塊下載
$ curl -r 0-10240 -o "zhao.part1" http:/cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &\
$ curl -r 10241-20480 -o "zhao.part1" http:/cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &\
$ curl -r 20481-40960 -o "zhao.part1" http:/cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 &\
$ curl -r 40961- -o "zhao.part1" http:/cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3
Linux用 cat zhao.part* > zhao.mp3合併
Windows用copy /b 合併

12) -u: 指定 FTP 帳號密碼
$ curl -u name:passwd ftp://ip:port/path/file
$ curl ftp://name:passwd@ip:port/path/file

13) -T: 上傳檔案
$ curl -T localfile -u name:passwd ftp://upload_site:port/path/
$ curl -T localfile http://cgi2.tky.3web.ne.jp/~zzh/abc.cgi
(注意這時候使用的協定是 HTTP 的 PUT method)

14) Http GET 與 POST 模式
GET 模式什麼 option 都不用，只需要把變數寫在 url 裡面就可以了比如：
$ curl http://www.linuxidc.com/login.cgi?user=nickwolfe&password=12345
而 POST 模式的 option 則是 -d
$ curl -d "user=nickwolfe&password=12345" http://www.linuxidc.com/login.cgi
到底該用 GET 模式還是 POST 模式，要看對面伺服器的程式設定。比如 POST 模式下的文件上傳
<form action="http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi" enctype="multipar/form-data" method="POST">
<input name="upload" type="file"/>
<input name="nick" type="submit" value="go"/></form>
這樣一個 HTTP 表單，我們要用 curl 進行模擬，就該是這樣的語法：
$ curl -F upload=@localfile -F nick=go http://cgi2.tky.3web.ne.jp/~zzh/up_file.cgi

15) https 使用本地認證
$ curl -E localcert.pem https://remote_server

16) 通過 dict 協定去查字典
$ curl dict://dict.org/d:computer


/******************************************************************************/
讓Linux NAT伺服器支援UPnP
/******************************************************************************/
注意：如果對網路安全要求較高或要求高可控制性的網路，則不要安裝配置UPnP支援，否則
會導致網路NAT映射比較混亂，從而引發許多問題。建議小型網路或者家庭網路使用UPnP。
最近經常使用一些P2P類型軟體，發現老得在Linux伺服器上手動設置NAT，非常麻煩，而看著
許多P2P軟體都支援UPnP就眼饞，如果能讓Linux支援UPnP那就簡單方便多了！
於是在網上搜索了一下有關讓Linux支援UPnP的文章，於是就寫了這篇文章。

一、什麼是UPnP
1. UPnP簡介
UPnP(Universal Plug and Play)技術對即插即用進行了擴展，它簡化了家庭或企業中智慧設
備的聯網過程。在結合了UPnP技術的設備以物理形式連接到網路中之後，它們可以通過網路自
動彼此連接在一起，而且連接過程無需用戶的參與UPnP規範基於TCP/IP協定和針對設備彼此間
通訊而制訂的其它Internet協定。這就是它之所以被稱作"通用(Universal)"的原因所在--
UPnP技術不依賴於特定的設備驅動程式，而是使用標準的協定。UPnP設備可以自動配置網路地
址，宣佈它們在某個網路子網的存在，以及互相交換對設備和服務的描述。基於Windows XP的
電腦可以充當一個UPnP控制點，通過程式界面對設備進行發現和控制。
如果與以前的即插即用相比，這種技術似乎並不具有什麼革命性的意義。在作業系統中增加即
插即用技術使得在單個電腦上安裝、配置和添加外設的工作變得更容易了。但是UPnP為家庭用
戶或者小型辦公環境中的非專業用戶所帶來的是一道更加美味的"大餐"，他們可以利用UPnP玩
多人遊戲，進行實時通信（Internet電話，電話會議）以及使用類似Windows XP的遠端協助這
樣的其它技術。

2. NAT 穿越技術
NAT穿越技術允許網路應用程式對它們是否位於一個具有UPnP能力的NAT設備之後進行檢測。然
後，這些程式將獲得共享的全球可路由IP地址，並且配置埠映射以將來自NAT外部埠的數據包
轉發到應用程式使用的內部埠上--所有這一切都是自動完成的，用戶無需手動映射埠或者進行
其它工作。NAT穿越技術允許網路設備或者點對點應用程式通過動態開啟和閉合與外部服務之
間的通信埠穿過NAT網關與外界通信。

二、在Linux中部署UPnP支援
我們假設該Linux的內核版本是2.4.x，使用撥號上網，外網介面是ppp0，內網介面是eth0，並
且已經啟用iptables設定了 NAT。
在Linux中部署UPnP主要使用2個軟體的配合：UPnP SDK for Linux和LinuxIGD。

下載地址：
UPnP SDK for Linux: http://sourceforge.net/projects/upnp/
LinuxIGD: http://linux-igd.sourceforge.net/
注意：要下載upnpsdk-1.0.4.tar.gz，1.0.4以上的版本不能和LinuxIGD很好的協同工作！

A. 安裝：
----------
1. 解包UPnP SDK
# tar xzvf upnpsdk-1.0.4.tar.gz
2. 修改源代碼
為了能夠使Windows MSN Messenger在UPnP下正常通訊，所以必須修改源代碼：
# cd upnpsdk-1.0.4
# vi src/ssdp/ssdplib.c
將第406行的：
SelfAddr.sin_addr.s_addr = inet_addr(SSDP_IP);
改為：
SelfAddr.sin_addr.s_addr = htonl(INADDR_ANY);
3. 編譯安裝UPnP SDK
# make
# make install
4. 解包Linux-IGD
# tar xzvf linuxigd-0.92.tgz
5. 編譯安裝Linux-IGD
# cd linux-igd
# make
# make install

B. 配置
--------
1. 增加多播路由
# route add -net 239.0.0.0 netmask 255.0.0.0 eth0
2. 為iptables建議一個軟鏈接
# cd /usr/sbin
# ln -s /sbin/iptables ./
啟動UPnP
# upnpd ppp0 eth0
診斷UPnP運行狀態
# tail /var/log/messages
如果能夠看到：
Dec 14 16:01:49 doorway -- MARK --
Dec 14 16:02:15 doorway upnpd: The Linux UPnP Internet Gateway Device Ver 0.92 by Dime (dime@gulfsales.com)
Dec 14 16:02:15 doorway upnpd: Special Thanks for Intel's Open Source SDK and original author Genmei Mori's work.
則說明UPnP已經成功啟動。

C. 測試
--------
以支援UPnP的P2P網路電視PPLive為例，在PPLive中打開UPnP支援選項，然後連接一個頻道。
在Linux中執行：
# tail /var/log/debug -f
如果能看到：
Dec 14 16:56:33 doorway upnpd: AddPortMap: RemoteHost: (null) Prot: 17 ExtPort: 3226 Int: 10.0.0.2.3226
Dec 14 16:56:33 doorway upnpd: AddPortMap: RemoteHost: (null) Prot: 6 ExtPort: 3226 Int: 10.0.0.2.3226
Dec 14 16:56:33 doorway upnpd: AddPortMap: RemoteHost: (null) Prot: 6 ExtPort: 3156 Int: 10.0.0.2.3156
Dec 14 16:56:33 doorway upnpd: AddPortMap: RemoteHost: (null) Prot: 6 ExtPort: 3156 Int: 10.0.0.2.3156
則說明PPLive已經向UPnP請求進行埠映射了。只要看到這樣的字樣，就說明UPnP已經完全工作起來了。


/******************************************************************************/
MQTT
/******************************************************************************/
樹莓派安裝 Mosquitto 輕量級 MQTT Broker 教學，連接各種物聯網設備
https://blog.gtwang.org/iot/raspberry-pi/raspberry-pi-mosquitto-mqtt-broker-iot-integration/

Mosquitto 是一個開放原始碼 MQTT broker，安裝於樹莓派中就可以把所有的感測器、運算與控制設備連結起來，打造一個整合性的物聯網架構。
在物聯網的應用中，有許多的感測器會產生各種的資料，這些資料可能會傳送至資料庫中儲存、交給運算伺服器分析、或是直接傳遞至使用者端即時顯示，而物聯網中的各種設備也需要接收來自於使用者或自動控制程式程式的指令，進行各種智慧化的動作，要讓整個物聯網環境具備互相溝通的能力，就需要有一個資訊傳遞的機制。
MQTT 是一種 machine-to-machine（M2M） 的輕量級通訊協定，可以讓各種設備互相溝通，而其所需要的運算與傳輸頻寬很低，非常適合用於物聯網中的各種應用。
在 MQTT 的通訊架構之下，會有一台設備專門負責所有訊息的派送工作，這個角色就稱為 broker，所有的訊息在傳遞時都會經過 broker，由 broker 來負責處理每一則訊息該如何遞送。

MQTT 通訊協定與物聯網 IOT 應用整合概念
MQTT broker 的實作有非常多種，例如 ActiveMQ Apollo、 HiveMQ、 Mosca、 Mosquitto、 RabbitMQ 等，基本上來說不管使用那一個實作版本都可以，功能上不會差太多。

這裡我們以樹莓派的 Linux 環境為例，介紹 Mosquitto 這一個 MQTT 實作版本的安裝與使用方式，也就是把樹莓派打造成一個 MQTT broker 的角色，負責所有物聯網設備之間的相互溝通。
名稱：Mosquitto
描述：開放原始碼 MQTT Broker
網址：Mosquitto 官方網站
安裝 Mosquitto
在樹莓派的 Raspbian Linux 中我們可以使用 apt 直接安裝 mosquitto 套件，同時也順便安裝 mosquitto-clients 這個 MQTT clients 的套件，方便測試：
apt-get install mosquitto mosquitto-clients
正常來說，安裝完成後 mosquitto 服務會自動啟動，我們可以使用 service 指令檢查一下 mosquitto 服務的狀態：
service mosquitto status
<code>mosquitto</code> 服務狀態
mosquitto 服務狀態
服務的狀態呈現綠色的 active 就表示 Mosquitto 有在正常運作，接著就可以開始使用 MQTT Broker 的功能了。
使用 Mosquitto MQTT Broker
在 MQTT 的架構中，設備可分為三種：
Publisher：發送訊息者。
Subscriber：接收訊息者。
Broker：轉送訊息者。
而不同的訊息可能會需要傳遞給不同的接收者，所以訊息在發送的時候，發送者（publisher）必須標示這則訊息的主題（topic），而轉送訊息者（broker）則會依照這則訊息的主題，將訊息傳遞給有訂閱該主題的接收者（subscriber），這就是 MQTT 基本的訊息傳遞架構。

MQTT 訊息傳遞架構
在物聯網的應用中，一個設備可以是訊息的接收者，接收從其他設備發送過來的訊息，同時也可以訊息的發布者，發送訊息給其他設備。

了解這個 MQTT 的基本架構之後，我們可以開啟一個虛擬終端機視窗，使用 mosquitto_sub 指令來訂閱指定的主題，也就是成為一個訊息的接收者：
mosquitto_sub -t gtwang/test
這裡的 -t 參數就是指定要訂閱的主題（topic），而後面的 gtwang/test 就是主題的名稱。
MQTT 的主題在使用時不需要事先設定，直接在發布或訂閱時指定自己要的主題名稱即可。

MQTT 中的主題名稱類似一般的檔案系統，是採用階層的方式命名，我們可以自己決定命名的規則，要使用幾層都可以，善用有條理的命名方式可以讓訊息更好管理，例如 sensors/COMPUTER_NAME/temperature/HARDDRIVE_NAME 這樣就是一個不錯的命名方式。
接著再開啟另外一個虛擬終端機視窗，作為訊息的發送者，使用 mosquitto_pub 將訊息發送至 gtwang/test 這個主題：
mosquitto_pub -t gtwang/test -m "Hello, world!"
這裡的 -m 參數就是指定要送出的訊息內容，執行這行指令之後，就會將訊息傳送至 broker，在由 broker 將訊息送給 gtwang/test 主題的訂閱者，也就是另外一個虛擬終端機視窗，所以這時候就可以在另外一個視窗中看到這行訊息。

Mosquitto client
以上就是基本 MQTT 訊息傳遞的傳送方式。
訂閱多個主題
MQTT 的主題設計成階層式的架構，主要是為了可以支援比較複雜的訂閱規則，最簡單的主題訂閱方式就是直接指定完整的主題名稱，例如：
sensors/my_computer/temperature/my_hd
除了這種方式之外，我們可以利用加號 + 這個萬用字元來匹配任意的名稱，例如：
sensors/+/temperature/+
這樣的話就會接收到所有第一層為 sensors 而第三層為 temperature 的訊息。
假設有一個主題名稱為 a/b/c/d，則以下這幾種主題指定方式都可以匹配該主題：
a/b/c/d
+/b/c/d
a/+/c/d
a/+/+/d
+/+/+/+
但是以下這幾種就不會與 a/b/c/d 批配：
a/b/c
b/+/c/d
+/+/+
另外一種萬用字元是井字號 #，這個萬用字元專門用於結尾處，可以匹配之後所有的階層，以下幾種寫法都可以匹配 a/b/c/d：
#
a/#
a/b/#
a/b/c/#
+/b/c/#

使用者認證
預設的 Mosquitto 服務是允許匿名登入使用的，也就是說任何人都可以透過 MQTT 的協定傳送與接收資料，若是在封閉的網路環境之下是沒有問題，但若是開放性的網路，最好就要上一些安全機制。
最基本的安全機制就是設定登入的帳號密碼，只有經過認證的使用者可以透過 Mosquitto 服務傳送或是接收資料，以下是 Mosquitto 設定帳號與密碼的步驟。
STEP 1
建立 Mosquitto 用的帳號密碼檔案，並新增 gtwang 這個使用者：
mosquitto_passwd -c /etc/mosquitto/passwd gtwang
執行這行指令後，接著要設定 gtwang 的密碼。
STEP 2
編輯 /etc/mosquitto/mosquitto.conf 設定檔，加入以下設定：
# 設定帳號密碼檔案
password_file /etc/mosquitto/passwd
# 禁止匿名登入
allow_anonymous false
STEP 3
重新啟動 mosquitto 服務：
service mosquitto restart
STEP 4
以設定好的帳號密碼登入，訂閱 gtwang/test 主題：
mosquitto_sub -t gtwang/test -u gtwang -P secret123
以設定好的帳號密碼登入，發送訊息至 gtwang/test 主題：
mosquitto_pub -t gtwang/test -u gtwang -P secret123 -m "Hello, world!"

設定好使用者認證機制之後，接下來還要設定安全加密連線，請繼續閱讀下一頁。
安全加密 TLS 連線
在安全性的考量上，僅僅只有加上帳號密碼是不夠的，至少還要有安全加密的保護，才能達到基本的防禦效果，否則讓帳號與密碼以明碼的方式在網路上傳遞，跟沒有設定帳號密碼是差不多的。
以下是 Mosquitto 設定安全加密 TLS 連線的步驟。
STEP 1
建立一個只有自己能讀取的目錄，隨後我們要在這個目錄中產生伺服器用的金鑰檔案。
mkdir myCA
chmod 700 myCA
cd myCA
STEP 2
產生金鑰的過程可以參考 mosquitto-tls 的 man page，而更快速的方式是使用 generate-CA.sh 這一個已經寫好的指令稿：
wget https://github.com/owntracks/tools/raw/master/TLS/generate-CA.sh
bash generate-CA.sh
執行 generate-CA.sh 之後，會自動產生伺服器用的金鑰。
STEP 3
將金鑰複製到 Mosquitto 的目錄之中：
sudo cp ca.crt /etc/mosquitto/ca_certificates/
sudo cp raspberrypi.crt raspberrypi.key /etc/mosquitto/certs/
STEP 4
重新啟動 Mosquitto 服務：
service mosquitto restart
如果重新啟動 Mosquitto 服務時，/var/log/mosquitto/mosquitto.log 出現這樣的錯誤：
Error: Unable to load server key file "/etc/mosquitto/certs/raspberrypi.key". Check keyfile.
通常是因為檔案權限不足的問題，只要修改一下檔案的擁有者即可：
sudo chown mosquitto /etc/mosquitto/certs/raspberrypi.key
STEP 5
檢查伺服器的金鑰是否正常運作：
mosquitto_sub -t '$SYS/broker/bytes/#' \
  -u gtwang -P secret123 \
  --cafile ca.crt -v
$SYS/broker/bytes/# 這個主題每隔 10 秒會輸出統計資訊，類似這樣：
$SYS/broker/bytes/received 1008
$SYS/broker/bytes/sent 253
$SYS/broker/bytes/received 1092
$SYS/broker/bytes/sent 325
有收到訊息就表示正常。
STEP 6
使用密碼配合 TLS 安全加密，訂閱 gtwang/test 主題：
mosquitto_sub -t gtwang/test -u gtwang -P secret123 \
  --cafile ca.crt
使用密碼配合 TLS 安全加密，發送訊息至 gtwang/test 主題：
mosquitto_pub -t gtwang/test -u gtwang -P secret123 \
  -m "Hello, world!" --cafile ca.crt
連接手機與電腦
在 Mosquitto 的 MQTT broker 伺服器架設好之後，任何支援 MQTT 協定的設備都可以直接連線進來傳送或是接收訊息，這裡我們以一台 Android 手機作為示範，將樹莓派上的訊息傳送至手機，並同時也可以將手機上的訊息傳回樹莓派。

在 Andorid 手機上有非常多 MQTT client 的 app，這次我選擇 IoT MQTT Dashboard 這一款支援加密的 MQTT client app 來做示範，而這個 app 在建立加密連線時需要讀取 BKS 格式的憑證檔案，所以我們要先把自己的 ca.crt 轉為 BKS 檔。
STEP 1
從 bouncycastle.org 下載 bcprov-ext-jdk15on-156.jar：
wget http://bouncycastle.org/download/bcprov-ext-jdk15on-156.jar
STEP 2
將 ca.crt 轉換為 BKS 檔：
keytool -importcert -v -trustcacerts -file ca.crt \
  -alias IntermediateCA -keystore android.bks \
  -provider org.bouncycastle.jce.provider.BouncyCastleProvider \
  -providerpath bcprov-ext-jdk15on-156.jar \
  -storetype BKS -storepass mysecret
其中 mysecret 可以換成自己的密碼。
STEP 3
將 轉換好的 BKS 檔 android.bks 複製到 Android 手機上，然後開啟 IoT MQTT Dashboard 進行設定，填入樹莓派的基本資訊（左圖）。
Server 欄位就填入樹莓派的 IP 位址（可用 ifconfig 指令查詢），連接埠（Port）預設是 1883，Username 與 Password 就是剛剛上面新增的Mosquitto 帳號與密碼，將 SSL 打勾之後，並填入剛剛產生的 BKS 檔，還有 BKS 檔的密碼。
Android 手機 MQTT Dashboard
Android 手機 MQTT Dashboard
設定好 MQTT 伺服器之後，新增一個 Subscribe 設定，也就是訂閱一個主題，這裡我以 gtwang/test 這個主題做示範。
STEP 4
在樹莓派中執行以下指令，送出兩則測試訊息。
mosquitto_pub -t gtwang/test -u gtwang -P secret123 \
  -m "Hello, world!" --cafile ca.crt
mosquitto_pub -t gtwang/test -u gtwang -P secret123 \
  -m "This is a test." --cafile ca.crt
STEP 5
查看 Android 手機上的 MQTT Dashboard 訊息，正常的話這樣就可以收到從樹莓派發送出來的兩則訊息了。
Android 手機 MQTT Dashboard
STEP 6
讓 Android 手機發布訊息至樹莓派中，在 MQTT Dashboard 中新增一個 Publish 設定，發送訊息至 gtwang/test 主題。

這時候在樹莓派中就可以使用 Mosquitto 的 client 接收這個來自於 Android 手機的訊息。
Mosquitto client
這裡我們是將 Android 手機發送的訊息也送進 gtwang/test 主題中，而 Android 手機本身也是這個主題的訊息訂閱者，所以自己也會收到這則訊息，如果不想讓自己也收到訊息的話，可以更換訊息的主題（例如 gtwang/test2），要如何設計訊息的主題就要看實際的需求而定。
基本上不管訊息要從哪個設備發送，以及從哪個設備接收，只要依循 MQTT 的協定、設定好訊息主題，任何設備都可以非常容易地互相溝通，因此 MQTT 在物聯網的應用上可以說是相當有發展性的技術。


/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
